# NAME

Posterous - API access to posterous.com

# SYNOPSIS

    use strict;
    use Posterous;

    my $api = Posterous->new(email => 'user@example.com', password => 'MyPuppEDog');

    my $site = $api->get_site(); # your primary site

    my $posts = $api->get_public_posts(site => $site->{id}, page => 2);

# DESCRIPTION

A library for accessing Posterous through the Posterous API. Currently
incomplete, but all of the existing functions should work and are fully
unit-tested (as much as they actually can be without actually hitting
Posterous' servers).

# POSTEROUS API: AUTH

## fetch_api_token

Uses the email-password combination to grab an API access token from the
Posterous API. Rather than directly passing back the JSON-parsed structure,
pulls the api_token out of it (and therefore will return undef if it's not
there).

# POSTEROUS API: SITES

## sites ( $user )

Returns a list of data structures that each represents a site that is
associated with the specified user. $user defaults to 'me' (which is a shortcut
for the currently authorized user).

## site ( $user, $site )

Returns a dataset that describes the site.

- __$user__ - The user. (Default: me)
- __$site__ - Defaults to 'primary'

## create_site ( %options )

Create a new posterous site for an existing user.

Options:

- __name__ - THe name of the site. Required.
- __is_private__ - A boolean describing if the site is private or not. (Default: 0)
- __hostname__ - The sub-domain part of the full domain (e.g. _hostname_.posterous.com)
- __user__ - The user to create the site for. (Default: me)

Returns a data structure like:

    {
        "name"              : "twoism's posterous",
        "is_private"        : false,
        "full_hostname"     : "twoism.posterous.com",
        "posts_count"       : 224,
        "id"                : 1752789,
        "comment_permission": 2,
        "posts_url"         : "/api/2/users/637118/sites/1752789/posts"
    }

## delete_site ( $site, $user )

Delete the site specified by $site and $user. $user defaults to 'me,' but $site
is required. I feel that it would be too easy to accidentally perform an
unintented destructive operation if $site defaulted to 'primary.' (And it would
be especially destructive because, presumably, you primary site is the most
important one to you). $site can either be the site id or hostname.

Returns a boolean depending on whether or not the site was successfully deleted.

## get_site_subscribers ( $user, $site )

Fetch the list of subscribers to $site for $user.

- __$user__ - The user. Defaults to 'me'.
- __$site__ - Defaults to 'primary.'

## subscribe_to_site ( $site, $user )

Subscribes the current user to the specified site.

- __$site__ - The id of the site to subscribe to (or the shortcut 'primary').
Defaults to 'primary,' though that doesn't make too much sense for the use-case
of this API call.
- __$user__ - The user field. Just here for added flexibility. Defaults to '1'
which is the only value that the API documents mention.

## unsubscribe_from_site ( $site, $user )

Unsubscribes the current user from the specified site. 

- __$site__ - The id of the site to unsubscribe from (or the shortcut 'primary').
Defaults to 'primary,' though that doesn't make too much sense for the use-case
of this API call.
- __$user__ - The user field. Just here for added flexibility. Defaults to '1'
which is the only value that the API documents mention.

# POSTEROUS API: POSTS

## get_posts ( %options )

Fetches all posts for a site. %options are:

- __public__ - Controls whether or not to only operate on public posts.
- __noauth__ - Controls whether or not the API request will be (or attempt to be)
authenticated. Since the API call to get public posts doesn't require
authentication, it makes sense that someone might want to actually use it as
advertised. This option is thus here to be paired with the __public__ option. It
only makes sense when __public__ is true, and the call will croak when __noauth__
is true if __public__ is not true. Defaults to 0.
- __user__ - The user whose site to fetch posts from. Defaults to 'me' if
authenticating, otherwise requires a value.
- __site__ - The site to fetch posts from. Defaults to 'primary.'
- __page__ - The page number for the results set. Defaults to 1.
- __since_id__ - Retrieve posts created after this id
- __tag__ - Retrieve posts with this tag

Returns the parsed JSON returned from the API. Otherwise, returns undef.

## get_post ( $post_id, $site, $user )

Fetches a specific post.

- __$post_id__ - Required. The ID of the post to fetch.
- __$site__ - Specify the site to fetch the post from. Optional. Defaults to
'primary,' otherwise needs to be a site ID.
- __$user__ - Severely optional. Defaults to 'me.' 'me' is the only value that the API docs
talk about, but the request URL follows the pattern of some other URLs where
the $user can be selected. I've left this in to allow for some flexibility if
$user is ever needed as an option.

# AUTHOR

Brandon Sandrowicz <bsandrow@gmail.com>

# LICENSE

Licensed under the MIT license. See LICENSE file in distribution.